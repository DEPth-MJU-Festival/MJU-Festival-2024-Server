# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CICD with Gradle And Docker

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # CREATE YML FILE
    - name: create application.yml
      run: |
        cd ./src/main/resources
        
        # RDS
        touch ./application-rds.yml
        echo "${{ secrets.APPLICATION_RDS }}" > ./application-rds.yml

        # SWAGGER
        touch ./application-swagger.yml
        echo "${{ secrets.APPLICATION_SWAGGER }}" > ./application-swagger.yml

        # S3
        touch ./application-s3.yml
        echo "${{ secrets.APPLICATION_S3 }}" > ./application-s3.yml

    # GRANT PEMISSION  
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        arguments: clean build -x test

    # Docker IMAGE BUILD
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }} .

    # DockerHub LOGIN
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # DockerHub IMAGE PUSH
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}
        
  cd-pipeline:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}

          script: |
            sh /home/ubuntu/deploy.sh ${{ secrets.PROJECT_NAME }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_REPOSITORY }}    
    

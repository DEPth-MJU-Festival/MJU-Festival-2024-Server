name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: mju-festival-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: mju-festival-codedeploy-application
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: mju-festival-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # (3) gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # (4) YML 파일 생성
      - name: create application.yml
        run: |
          cd ./src/main/resources
          
          # RDS
          touch ./application-rds.yml
          echo "${{ secrets.APPLICATION_RDS }}" | base64 --decode > ./application-rds.yml
          
          # SWAGGER
          touch ./application-swagger.yml
          echo "${{ secrets.APPLICATION_SWAGGER }}" | base64 --decode > ./application-swagger.yml
          
          # S3
          touch ./application-s3.yml
          echo "${{ secrets.APPLICATION_S3 }}" | base64 --decode > ./application-s3.yml

      # (5) Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # (6) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (7) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (8) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
